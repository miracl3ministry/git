#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Задание 1: организация кодовой базы под требования PEP8.
# Кодировка всегда должна быть UTF-8.
# Задание 2:
if __name__ == '__main__':
    # Импорты всегда вверху файла, перед глобальными переменными и
    # константами в определенном порядке. Сначала идут импорты 
    # стандартной библиотеки, потом сторонние библиотеки и далее свои 
    # локальные импорты/приложения.  Эти группы разделяются пустой 
    # строкой.  Рекомендуется абсолютное импортирование. Следует 
    # избегать "from <module> import *".
    import os
    import sys
    import re

    import numpy as np
    import scipy as sp
    import pandas as pd

    import my_module.py
    # Пустые строки.


    # Между импортами и функциями верхнего уровня две пустые строчки.
    def top_level_function():
        pass


    # А также между функциями верхнего уровня.
    class MyClass1():
        # Задание 4: именование переменных и классов должно быть в виде
        # английских слов(терминов), везде, где это возможно.  Пишутся
        # символами ASCII.  Все аббревиатуры заглавными буквами.  Не 
        # использовать символы "l", "I", "O" как название переменной.
        #
        # Переменные, начинающиеся с _, принято использовать для 
        # "внутренних" значений.  Такие значения не импортируются через
        # import.  Именования, заканчивающиеся на _, нужны для 
        # разрешения конфликтов с зарезервированными переменными python
        # например class_.  var__ - для атрибутов класса.  "Магические"
        # объекты и атрибуты __name__, использовать только в 
        # соответствии с документацией.
        #
        # Пакеты и модули должны иметь короткие имена со строчными 
        # буквами.
        #
        # Имена классов пишутся в стиле CapitalizedWords.
        #
        # Исключения именуются как классы, но с добавлением суффикса 
        # "Error".
        #
        # Имена функций и переменных пишутся строчными буквами с 
        # разделением нижним подчеркиванием.
        #
        # Константы пишутся заглавными буквами.

        def class_method1():
            pass
            # Пустая строка между методами класса.
        
        def class_method2():
            pass


    # Между объявлениями классов две пустые строки.
    class MyClass2():

    # Отступы (4 пробела).
        variable = 1


    # Максимальная длинна строки: 79 символов, для комментариев: 72 
    # Допустимо использовать \ для разделения длинных строк.
    if (1 == 1 and 2 == 2 and 3 == 3 and '1234567890' == "1234567890" and \
        4 == 4 and 5 == 5 and 6 == 7):
        # Опционально разделение условия и кода комментарием.
        # Перенос строки перед бинарным оператором.
        variable_with_a_very_difficult_amount = (var1
                                                 + var2
                                                 - var3)
    # Пробелы.
    # Следует избегать лишних пробелов.
    # Бинарные и логические операторы окружаются с обеих сторон равным
    # количеством пробелов, но не более 1.  Print(i, j), x = y
    # Каждый новый вызов функции с новой строки, не делать однострочный
    # код.
    #
    # При создании кортежа из одного элемента ставится конечная запятая.
    hosts = ('site1.ru',)

    # Комментарии.
    # Комментарии это всегда предложения, т.е. ставятся точки, пишется
    # с заглавной.  После точки, означающей конец предложения, ставится
    # 2 пробела, за исключением последнего предложения.  Они должны 
    # быть понятными и на английском языке, кроме случаев когда код 
    # будет читаться только носителем языка.  Обычно комментарии 
    # применяются к следующему за ним коду.  Каждый блок комментария
    # начинается с # и пробела (# текст).  Новый абзац обозначается 
    # одним символом #.
    1 + 1  # Строчные комментарии отделяются двумя пробелами.

    # Строки документации.
    def strange_named_function():
        '''Данная функция делает то и это.

        В результате возвращает 1'''
        do_something()
        return 1
    # Другие рекомендации.
    # Не делать конкатенацию строк через a + b, лучше через .join().
    # Объекты сравниваются через isinstance(obj, int).